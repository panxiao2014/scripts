class Solution:
    def evalRPN(self, tokens):
        def isOperator(i):
          if(i=='+' or i=='-' or i=='*' or i=='/'):
            return True
          else:
            return False
          
        def compute(a, b, op):
          if(op=='+'):
            return a+b
          elif(op=='-'):
            return a-b
          elif(op=='*'):
            return a*b
          elif(op=='/'):
            return int(a/b)
          
          
        strLen = len(tokens)  
        opStack = []
        result = 0
        
        if(strLen == 1):
          return tokens[0]
        
        for i in range(0, strLen):
          if(isOperator(tokens[i]) == False):
            opStack.append(int(tokens[i]))
          else:
            b = opStack.pop()
            a = opStack.pop()
            result = compute(a, b, tokens[i])
            opStack.append(result)
            
        return result


tokens = ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]

solution = Solution()
print(solution.evalRPN(tokens))
